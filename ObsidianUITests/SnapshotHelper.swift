//
//  SnapshotHelper.swift
//  Generated by fastlane snapshot
//

import Foundation
import XCTest

var deviceLanguage = ""
var locale = ""

func setupSnapshot(_ app: XCUIApplication) {
    Snapshot.setupSnapshot(app)
}

func snapshot(_ name: String, timeWaitingForIdle timeout: TimeInterval = 20) {
    Snapshot.snapshot(name, timeWaitingForIdle: timeout)
}

open class Snapshot: NSObject {
    static var app: XCUIApplication!
    static var cacheDirectory: URL!
    static var screenshotsDirectory: URL!

    open class func setupSnapshot(_ app: XCUIApplication) {
        Snapshot.app = app

        do {
            let cacheDir = try pathPrefix()
            Snapshot.cacheDirectory = cacheDir
            Snapshot.screenshotsDirectory = cacheDir.appendingPathComponent("screenshots", isDirectory: true)
            
            try FileManager.default.createDirectory(at: screenshotsDirectory, withIntermediateDirectories: true, attributes: nil)
        } catch let error {
            print("Failed to create screenshots directory: \(error)")
        }
    }

    class func snapshot(_ name: String, timeWaitingForIdle timeout: TimeInterval = 20) {
        if timeout > 0 {
            waitForLoadingIndicatorToDisappear(within: timeout)
        }

        print("snapshot: \(name)")
        sleep(1)
        
        let screenshot = app.windows.firstMatch.screenshot()
        let attachment = XCTAttachment(screenshot: screenshot)
        attachment.name = name
        attachment.lifetime = .keepAlways
        add(attachment)
    }
    
    class func waitForLoadingIndicatorToDisappear(within timeout: TimeInterval) {
        let networkLoadingIndicator = XCUIApplication().otherElements.deviceStatusBars.networkLoadingIndicators.element
        let deadline = Date().addingTimeInterval(timeout)

        while Date() < deadline {
            if !networkLoadingIndicator.exists { break }
            sleep(1)
        }
    }
    
    class func pathPrefix() throws -> URL {
        let homeDir = URL(fileURLWithPath: NSHomeDirectory())
        return homeDir.appendingPathComponent("Library/Caches/tools.fastlane")
    }
}

extension XCUIElement {
    var deviceStatusBars: XCUIElementQuery {
        let containerType = XCUIElement.ElementType.init(rawValue: 46)!
        return self.descendants(matching: containerType)
    }
    
    var networkLoadingIndicators: XCUIElementQuery {
        let networkLoadingIndicatorType = XCUIElement.ElementType.init(rawValue: 58)!
        return self.descendants(matching: networkLoadingIndicatorType)
    }
}
